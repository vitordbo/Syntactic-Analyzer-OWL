
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ALL AND CARDINALITY CLASS COLON COMMA DATA_TYPE DISJOINTCLASSES EQ EQUIVALENTTO EXACTLY GT HAS ID INDIVIDUALS IS LBRACE LBRACKET LPAREN LT MAX MIN NOT OF ONLY OR PROPERTY RBRACE RBRACKET RESERVED RPAREN SOME SUBCLASSOF THAT VALUE\n    ontologia : descricao_classes descricao_individuals\n    \n    descricao_classes : CLASS ID EQUIVALENTTO expression_class COMMA descricao_classes\n                      | CLASS ID SUBCLASSOF expression_class COMMA descricao_classes\n                      | CLASS ID DISJOINTCLASSES LPAREN ID COMMA ID COMMA ID RPAREN COMMA descricao_classes\n                      | \n    \n    expression_class : ID\n                     | ID AND LPAREN expression_class COMMA expression_class RPAREN\n                     | ID AND LPAREN expression_class COMMA ID SOME ID RPAREN\n                     | ID AND LPAREN ID SOME ID RPAREN\n                     | ID AND LPAREN ID COMMA ID SOME ID RPAREN\n    \n    descricao_individuals : CLASS ID COLON ID COMMA descricao_individuals\n                          | \n    '
    
_lr_action_items = {'CLASS':([0,2,18,19,21,23,24,46,49,],[3,5,3,3,5,-2,-3,3,-4,]),'$end':([0,1,2,4,18,19,21,23,24,26,46,49,],[-5,0,-12,-1,-5,-5,-12,-2,-3,-11,-5,-4,]),'ID':([3,5,8,9,11,15,22,25,30,31,32,33,40,41,],[6,7,12,12,16,20,27,29,34,35,36,38,44,45,]),'EQUIVALENTTO':([6,],[8,]),'SUBCLASSOF':([6,],[9,]),'DISJOINTCLASSES':([6,],[10,]),'COLON':([7,],[11,]),'LPAREN':([10,17,],[15,22,]),'COMMA':([12,13,14,16,20,27,28,29,39,42,43,47,48,],[-6,18,19,21,25,31,32,33,-9,-7,46,-10,-8,]),'AND':([12,27,36,],[17,17,17,]),'SOME':([27,35,36,],[30,40,41,]),'RPAREN':([34,36,37,38,39,42,44,45,47,48,],[39,-6,42,43,-9,-7,47,48,-10,-8,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'ontologia':([0,],[1,]),'descricao_classes':([0,18,19,46,],[2,23,24,49,]),'descricao_individuals':([2,21,],[4,26,]),'expression_class':([8,9,22,32,],[13,14,28,37,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> ontologia","S'",1,None,None,None),
  ('ontologia -> descricao_classes descricao_individuals','ontologia',2,'p_ontologia','app.py',144),
  ('descricao_classes -> CLASS ID EQUIVALENTTO expression_class COMMA descricao_classes','descricao_classes',6,'p_descricao_classes','app.py',149),
  ('descricao_classes -> CLASS ID SUBCLASSOF expression_class COMMA descricao_classes','descricao_classes',6,'p_descricao_classes','app.py',150),
  ('descricao_classes -> CLASS ID DISJOINTCLASSES LPAREN ID COMMA ID COMMA ID RPAREN COMMA descricao_classes','descricao_classes',12,'p_descricao_classes','app.py',151),
  ('descricao_classes -> <empty>','descricao_classes',0,'p_descricao_classes','app.py',152),
  ('expression_class -> ID','expression_class',1,'p_expression_class','app.py',157),
  ('expression_class -> ID AND LPAREN expression_class COMMA expression_class RPAREN','expression_class',7,'p_expression_class','app.py',158),
  ('expression_class -> ID AND LPAREN expression_class COMMA ID SOME ID RPAREN','expression_class',9,'p_expression_class','app.py',159),
  ('expression_class -> ID AND LPAREN ID SOME ID RPAREN','expression_class',7,'p_expression_class','app.py',160),
  ('expression_class -> ID AND LPAREN ID COMMA ID SOME ID RPAREN','expression_class',9,'p_expression_class','app.py',161),
  ('descricao_individuals -> CLASS ID COLON ID COMMA descricao_individuals','descricao_individuals',6,'p_descricao_individuals','app.py',166),
  ('descricao_individuals -> <empty>','descricao_individuals',0,'p_descricao_individuals','app.py',167),
]
